DROP TABLE IF EXISTS cars;

CREATE TABLE cars (
  ID_number serial PRIMARY KEY NOT NULL,
  brand varchar(10) NOT NULL,
  model varchar(20),
  year int,
  fuel varchar(20),
  engine decimal,
  gearbox varchar(15),
  mileage int,
  price int NOT NULL DEFAULT 0,
  description text
);

INSERT INTO cars VALUES (DEFAULT, 'Kia', 'Ceed', 2021, 'gasoline', 1.4, 'manual', 2500, 530, 'Color: red, 5 seats, cruise control, Android Auto, Bluetooth');
INSERT INTO cars VALUES (DEFAULT, 'Opel', 'Mokka', 2021, 'gasoline', 1.2, 'automatic', 2500, 640, 'Color: grey, 5 seats, cruise control, Apple CarPlay, Android Auto, Bluetooth');
INSERT INTO cars VALUES (DEFAULT, 'Volkswagen', 'Passat', 2021, 'gasoline', 1.5, 'automatic', 2500, 780, 'Color: black, 5 seats, cruise control, Navigation, Bluetooth');
INSERT INTO cars VALUES (DEFAULT, 'Citroen', 'Berlingo/furgons', 2020, 'gasoline', 1.2, 'manual', 25000, 245, 'Color: red, 2 seats, cruise control, Android Auto, Bluetooth');
INSERT INTO cars VALUES (DEFAULT, 'Å koda', 'Scala Ambition', 2020, 'gasoline', 1.0, 'automatic', 25000, 248, 'Color: blue, 5 seats, cruise control, Android Auto, Bluetooth');
INSERT INTO cars VALUES (DEFAULT, 'Volkswagen', 'T-Cross City', 2020, 'gasoline', 1.0, 'automatic', 25000, 295, 'Color: grey, 5 seats, cruise control, Navigation, Bluetooth');

CREATE TABLE renters (
  renter_ID serial PRIMARY KEY NOT NULL,
  password varchar(20),
  name varchar(40) NOT NULL,
  last_name varchar(60) NOT NULL,
  ID_code varchar(20) NOT NULL,
  address text,
  e_mail varchar(60) NOT NULL,
  telephone_no varchar(12)
);
CREATE INDEX pers_ID ON renters (ID_code);

CREATE TABLE contracts (
  ID_number serial PRIMARY KEY NOT NULL,
  renter_ID integer NOT NULL,
  contract_number char(10),
  date_of_contract date,
  status char(2),
  constraint f_key foreign key (ID_number) references renters (renter_ID)
);

DROP TABLE IF EXISTS logs_cars;

CREATE TABLE logs_cars (  
id serial PRIMARY KEY NOT NULL,   
users varchar(20) DEFAULT NULL,   
time timestamp DEFAULT NULL, 
operation varchar(10) DEFAULT NULL,  
table_name name,  
column_name name,
changed_record integer
);

DROP FUNCTION IF EXISTS logs_cars;

CREATE FUNCTION logs_cars() 
RETURNS trigger AS '
DECLARE
v_time timestamp;
v_users varchar;
v_table_name name;
v_column_name name;
BEGIN
v_time := now();
v_users := current_user;
v_table_name := TG_TABLE_NAME;
v_column_name := TG_COLUMN_NAME;
IF (TG_OP = ''DELETE'') THEN
INSERT INTO logs_cars VALUES (DEFAULT, v_users, v_time, TG_OP, v_table_name, NULL, old.id);
END IF;
IF (TG_OP = ''INSERT'') THEN
INSERT INTO logs_cars VALUES (DEFAULT, v_users, v_time, TG_OP, v_table_name, NULL, new.id);
END IF;
IF (TG_OP = ''UPDATE'') THEN
INSERT INTO logs_cars VALUES (DEFAULT, v_users, v_time, TG_OP, v_table_name, v_column_name, old.id);
END IF;
RETURN NEW;
END;
' 
LANGUAGE 'plpgsql';


CREATE TRIGGER check_logs_cars
AFTER INSERT OR UPDATE OR DELETE ON cars 
FOR EACH ROW EXECUTE PROCEDURE logs_cars();

/* This is only for demonstration purposes and should be executed as a final step, not now.
CREATE USER klims PASSWORD 'klims11';
CREATE USER dace PASSWORD 'dace23';
CREATE GROUP admins;
ALTER GROUP admins ADD USER klims, dace;

GRANT ALL ON ALL TABLES IN SCHEMA public TO admins;

CREATE USER romans PASSWORD 'romans33';

GRANT SELECT, INSERT, UPDATE
ON TABLE cars
TO romans; 
*/
